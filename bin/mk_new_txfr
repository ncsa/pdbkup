#!/bin/bash

[[ -z "$PDBKUP_BASE" ]] && exit 1

DEBUG=$BKUP_DEBUG
VERBOSE=$BKUP_VERBOSE
[[ $DEBUG -gt 0 ]] && set -x

source $PDBKUP_BASE/lib/funcs.sh
source $PDBKUP_BASE/lib/read_ini.sh

read_ini $PDBKUP_BASE/conf/settings.ini
dump_ini


# CHECK FOR FILES TO BE TRANSFERRED
srcdir=${INI__GENERAL__DATADIR}/${INI__TXFR__SRCDIR_OUTBOUND}
numfiles=$( find "$srcdir" -mindepth 1 | wc -l )
if [[ $numfiles -lt 1 ]] ; then
    log "No files ready to transfer"
    exit 0
fi


# GENERATE SUBMISSION ID
subm_id=$( ${INI__GLOBUS__CLI} task generate-submission-id )
log "SUBMISSION ID: '$subm_id'"
grep -v '[0-9a-zA-Z-]' <<< "$subm_id" \
&& die "Invalid submission id: '$subm_id'"


# BUILD FILELIST
workdir=${INI__GENERAL__DATADIR}/${INI__TXFR__WORKDIR_OUTBOUND}
fn_filelist=$workdir/${subm_id}.filelist
debug "WORKDIR: $workdir"
debug "FN_FILELIST: $fn_filelist"
:>| $fn_filelist #create empty file or truncate existing file
go_tgtdir=${INI__GLOBUS__BASEDIR_REMOTE}
find $srcdir -mindepth 1 -maxdepth 1 -type f -print \
| while read; do
    src_fn=$( basename $REPLY )
    read dir_key ts <<< "$( filename2key_ts '$src_fn' )"
    read dir_key ts <<< $( filename2key_ts $src_fn )
    go_src="$workdir/$src_fn"
    go_tgt="$go_tgtdir/$dir_key/$ts/$src_fn"
    echo "$go_src $go_tgt" >> $fn_filelist
    mv "$srcdir/$src_fn" "$workdir/."
done
log "GO Filelist = $fn_filelist"

# INITIATE TRANSFER
endpoint_activate "${INI__GLOBUS__ENDPOINT_LOCAL}"
endpoint_activate "${INI__GLOBUS__ENDPOINT_REMOTE}"
go_label="submission_id__$subm_id"
go_verbose=""
[[ $VERBOSE -gt 0 ]] && go_verbose='-vv'
go_debug=""
[[ $DEBUG -gt 0 ]] && go_debug='--debug'
<$fn_filelist ${INI__GLOBUS__CLI} transfer \
    ${INI__GLOBUS__ENDPOINT_LOCAL} \
    ${INI__GLOBUS__ENDPOINT_REMOTE} \
    --submission-id $subm_id \
    --label "$go_label" \
    --batch

# UPDATE FILENAME WITH REAL TASKID
sleep 5
tmpfn=$( ${INI__GLOBUS__CLI} task list -F json --exact --filter-label "$go_label" \
| $PDBKUP_BASE/bin/json2ini.py -l0 )
read_ini -p GOSUBID "$tmpfn"
real_taskid=$GOSUBID__JSON__task_id
new_filelist=$workdir/${real_taskid}.filelist
mv $fn_filelist $new_filelist

# UPDATE TASK LABEL WITH FILENAME PATH
new_go_label=$( echo "$new_filelist" | sed -e 's/[^a-zA-Z0-9_,-]/__/g' )
${INI__GLOBUS__CLI} task update --label "$new_go_label" $real_taskid

${INI__GLOBUS__CLI} task show $real_taskid
