#!/usr/bin/bash

[[ $# -eq 1 ]] || {
    echo "ERROR: Missing INIFILE on cmdline"
    exit 1
}
INIFILE="$1"
INFODIR=$( dirname "$INIFILE" )
source $INFODIR/read_ini.sh
source $INFODIR/funcs.sh

# Ensure parallel is installed
PARALLEL=$( which parallel )
[[ -z "$PARALLEL" ]] && die "Unable to find 'parallel'"
[[ -x "$PARALLEL" ]] || die "Parallel program, 'parallel', is not executable"

# Get INI settings
read_ini "$INIFILE"
[[ -z "${INI__DAR__FSROOT}" ]] && die "Cound not find FSROOT in ini file '$first_dar_ini'"
[[ -d "${INI__DAR__FSROOT}" ]] || die "FSROOT '${INI__DAR__FSROOT}' is not a valid directory"

# Create necessary filepaths
CATALOGUE="$INFODIR"/$( basename "$INI__DAR__CATBASE" '.1.dar' )

# Create output filenames
XMLOUT="$INFODIR/${INI__DAR__FNBASE}.xml"
XMLSORTED="$INFODIR/${INI__DAR__FNBASE}.xml.sorted"
ORIGSORTED="$INFODIR/${INI__DAR__FNBASE}.filelist.sorted"
DIFFRAW="$INFODIR/${INI__DAR__FNBASE}.diffraw"
DIFFOUT="$INFODIR/${INI__DAR__FNBASE}.diff"

#for i in INIFILE INFODIR PARALLEL INI__DAR__FSROOT INI__DAR__CATBASE CATALOGUE XMLOUT XMLSORTED ORIGSORTED DIFFRAW DIFFOUT; do
#    printf '%20s %s\n' "$i" "${!i}"
#done
#exit

# Regenerate everything if INIFILE is newer than output files
varnamelist=( XMLOUT XMLSORTED ORIGSORTED DIFFRAW DIFFOUT )
force_redo=0
for refname in "${varnamelist[@]}"; do
    outfn="${!refname}"
done
if [[ $force_redo -ne 0 ]] ; then
    for refname in "${varnamelist[@]}"; do rm -f "${!refname}"; done
fi


# Extract xml from dar catalog
[[ -s "$XMLOUT" ]] || dar -Q -Txml -as -l "${CATALOGUE}" >"$XMLOUT"


### Create sorted list of files actually archived
[[ -s "$XMLSORTED" ]] || \
"$INFODIR"/dar_parse_xml.py -f "$INI__DAR__FSROOT" "$XMLOUT" \
| sort >"$XMLSORTED"


### Sort original filelist
[[ -s "$ORIGSORTED" ]] || sort -o "$ORIGSORTED" "$INI__DAR__FILELIST"


### Diff sorted filelists
diff --new-line-format='' --unchanged-line-format='' "$ORIGSORTED" "$XMLSORTED" >"$DIFFRAW"


### Ignore dirs in diff output
parallel -a "$DIFFRAW" '[[ -d {} ]] || echo {}' >"$DIFFOUT"

### Exit non-zero if DIFFOUT has any contents
[[ ! -s "$DIFFOUT" ]] 
